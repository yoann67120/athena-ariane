# ====================================================================
# Athena.SelfBuilder.psm1 â€“ Auto-construction & Auto-rÃ©paration
# Version : v1.3-CleanSyntax (2025-10-17)
# ====================================================================

Set-StrictMode -Version Latest
$ErrorActionPreference = "SilentlyContinue"

$ModuleDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RootDir   = Split-Path -Parent $ModuleDir
$Modules   = Join-Path $RootDir "Modules"
$ConfigDir = Join-Path $RootDir "Config"
$LogsDir   = Join-Path $RootDir "Logs"

if (!(Test-Path $ConfigDir)) { New-Item -ItemType Directory -Path $ConfigDir -Force | Out-Null }
if (!(Test-Path $LogsDir))   { New-Item -ItemType Directory -Path $LogsDir   -Force | Out-Null }

$FlagsFile = Join-Path $ConfigDir "Athena.Flags.ps1"
$SelfLog   = Join-Path $LogsDir   "SelfBuilder.log"

# --------------------------------------------------------------------
function Write-SelfLog {
    param([string]$Message,[string]$Level="INFO")
    $ts = (Get-Date).ToString('s')
    Add-Content -Path $SelfLog -Value "[$ts][$Level] $Message"
}

# --------------------------------------------------------------------
function Enable-AthenaEvolution {
    param([switch]$ForceExecutionPolicy)
    Write-SelfLog "Activating AutoEvolution mode and setting ExecutionPolicy"
    try {
        $global:AthenaAutoEvolution = $true
        $content = @()
        if (Test-Path $FlagsFile) { $content += Get-Content $FlagsFile -Raw }
        if ($content -notmatch 'AthenaAutoEvolution') {
            $content += '$global:AthenaAutoEvolution = $true'
        }
        $content | Set-Content -Path $FlagsFile -Encoding UTF8
        Write-SelfLog "Persistent flag written: $FlagsFile"
    } catch { Write-SelfLog "Flag error: $_" "ERROR" }

    if ($ForceExecutionPolicy) {
        try {
            Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force
            Write-SelfLog "ExecutionPolicy(CurrentUser)=RemoteSigned"
        } catch { Write-SelfLog "ExecutionPolicy error: $_" "WARN" }
    }
}

# --------------------------------------------------------------------
function New-AthenaModuleSkeleton {
    param([string]$Name,[string]$Header)

    # Nettoyer le nom de module (Ã©viter les points et espaces)
    $SafeName = $Name -replace '[^A-Za-z0-9_]', '_'
    $path = Join-Path $Modules "$Name.psm1"
    if (Test-Path $path) {
        Write-Host "ðŸ” Module dÃ©jÃ  existant : $path" -ForegroundColor DarkGray
        return $path
    }

    $template = @()
    $template += "# ===================================================================="
    $template += "# $Header"
    $template += "# Auto-generated by Athena.SelfBuilder on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    $template += "# ===================================================================="
    $template += "Set-StrictMode -Version Latest"
    $template += "`$ErrorActionPreference = 'SilentlyContinue'"
    $template += ""
    $template += "function Invoke-${SafeName} {"
    $template += "    Write-Host 'Module ${Name} operational.' -ForegroundColor Green"
    $template += "}"
    $template += ""
    $template += "Export-ModuleMember -Function Invoke-${SafeName}"

    $template -join "`n" | Set-Content -Path $path -Encoding UTF8
    Write-Host "ðŸ§© Nouveau module crÃ©Ã© : $path" -ForegroundColor Green
    Write-SelfLog "Module skeleton created: $path"
    return $path
}

# --------------------------------------------------------------------
function Ensure-PhaseModules {
    $targets = @(
        @{ n='Athena.AutoHarmony'; h='AutoHarmony - Emotional regulation' },
        @{ n='Athena.MemoryReport'; h='Memory -> Visual report' },
        @{ n='Athena.SelfEvolution'; h='Evolution generator (ideas -> modules)' },
        @{ n='Athena.Linker'; h='Cognitive and archives link' }
    )
    foreach ($t in $targets) { New-AthenaModuleSkeleton -Name $t.n -Header $t.h | Out-Null }
}

# --------------------------------------------------------------------
function Invoke-AthenaFirstAutonomy {
    Write-SelfLog "Starting first autonomy cycle"
    foreach ($m in @('Athena.Learning','Athena.AutoReport','Athena.MemoryReport','Athena.AutoHarmony','AutoPatch')) {
        $p = Join-Path $Modules ("$m.psm1")
        if (Test-Path $p) { try { Import-Module $p -Force -Global } catch {} }
    }
    if (Get-Command Invoke-AthenaLearning -ErrorAction SilentlyContinue) { Invoke-AthenaLearning }
    if (Get-Command Invoke-AthenaAutoHarmony -ErrorAction SilentlyContinue) { Invoke-AthenaAutoHarmony }
    if (Get-Command Invoke-AthenaMemoryReport -ErrorAction SilentlyContinue) { Invoke-AthenaMemoryReport }
    if (Get-Command Invoke-AthenaAutoReport -ErrorAction SilentlyContinue) { Invoke-AthenaAutoReport }
    if (Get-Command Invoke-AutoEvolution -ErrorAction SilentlyContinue) { Invoke-AutoEvolution }
    Write-SelfLog "First autonomy cycle completed"
}

# --------------------------------------------------------------------
function Invoke-AthenaSelfBuilder {
    [CmdletBinding()] param([switch]$ForceExecutionPolicy)
    Enable-AthenaEvolution -ForceExecutionPolicy:$ForceExecutionPolicy
    Ensure-PhaseModules
    Invoke-AthenaFirstAutonomy
    Write-Host "SelfBuilder: Phases 16-18 ready and cycle launched." -ForegroundColor Green
}

# --------------------------------------------------------------------
function Invoke-AthenaAutoRepairMissingModules {
    Write-Host "ðŸ§  DÃ©marrage du scan des erreurs Athena..." -ForegroundColor Cyan
    Write-SelfLog "Scan des erreurs pour modules manquants..."

    $logFile = Join-Path $RootDir "Logs\CockpitActions.log"
    if (!(Test-Path $logFile)) {
        Write-Host "âŒ Aucun fichier log trouvÃ© : $logFile" -ForegroundColor Red
        Write-SelfLog "Aucun fichier log trouvÃ© : $logFile"
        return
    }

    $lines = Get-Content $logFile -ErrorAction SilentlyContinue
    Write-Host "ðŸ” Lecture du log : $logFile" -ForegroundColor Yellow
    Write-Host "ðŸ“„ Nombre de lignes lues : $($lines.Count)" -ForegroundColor DarkGray

    $foundModules = @{}
    foreach ($line in $lines) {
        if ($line -match "Invoke-Athena([A-Za-z0-9_]+)") {
            $rawName = $Matches[1]
            $moduleName = "Athena." + $rawName
            if (-not $foundModules.ContainsKey($moduleName)) {
                $foundModules[$moduleName] = $true
                Write-Host "âš™ï¸ Module manquant dÃ©tectÃ© : $moduleName" -ForegroundColor Green
                Write-SelfLog "âš™ï¸ Module manquant dÃ©tectÃ© : $moduleName"
                try {
                    New-AthenaModuleSkeleton -Name $moduleName -Header "$moduleName - Auto-created by SelfBuilder"
                } catch {
                    Write-Host "âŒ Erreur de crÃ©ation : $($_.Exception.Message)" -ForegroundColor Red
                    Write-SelfLog "âŒ Erreur crÃ©ation $moduleName : $($_.Exception.Message)" "ERROR"
                }
            }
        }
    }

    if ($foundModules.Count -eq 0) {
        Write-Host "âš ï¸ Aucune erreur de module manquant trouvÃ©e dans le log." -ForegroundColor DarkYellow
        Write-SelfLog "Aucune erreur trouvÃ©e dans le log."
    }

    Write-Host "âœ… Scan terminÃ©." -ForegroundColor Cyan
    Write-SelfLog "Analyse des erreurs terminÃ©e."
}

# --------------------------------------------------------------------
Export-ModuleMember -Function Enable-AthenaEvolution,Invoke-AthenaSelfBuilder,Invoke-AthenaFirstAutonomy,Invoke-AthenaAutoRepairMissingModules
Write-Host "Module Athena.SelfBuilder chargÃ© (v1.3-CleanSyntax)." -ForegroundColor Cyan



