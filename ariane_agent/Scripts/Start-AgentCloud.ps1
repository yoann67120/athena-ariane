# ====================================================================
# üöÄ ARIANE V4 - PHASE 15 : Start-AgentCloud.ps1 (Final Stable)
# Auteur : Yoann Rousselle
# Description : Connexion Cloud ‚Üî Bridge Ariane (AgentKit)
# ====================================================================

param(
    [string]$NgrokURL = "https://ariane.ngrok.io/bridge",
    [string]$HmacKeyPath = "C:\Ariane-Agent\secrets\bridge_hmac.key",
    [string]$AgentKitAPI = "https://ariane.ngrok.io/bridge/register"
)

$LogDir = "C:\Ariane-Agent\logs"
$LogFile = Join-Path $LogDir "AgentCloud.log"
New-Item -ItemType Directory -Force -Path $LogDir | Out-Null

function Write-Log($msg, $color="Gray") {
    $ts = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    $line = "[$ts] $msg"
    Add-Content -Path $LogFile -Value $line
    Write-Host $line -ForegroundColor $color
}

Write-Host "==============================================="
Write-Host "üöÄ D√âMARRAGE DE LA CONNEXION AGENTKIT CLOUD"
Write-Host "==============================================="

# === √âtape 1 : V√©rification du Bridge local ===
try {
    $res = Invoke-RestMethod -Uri "http://localhost:5075/bridge/sync" -Method POST -ContentType "application/json" -Body "{}"
    if ($res.status -eq "received") {
        Write-Log "‚úÖ Bridge local d√©tect√© sur port 5075." "Green"
    } else {
        Write-Log "‚ö†Ô∏è R√©ponse inattendue du Bridge local : $($res | ConvertTo-Json)" "Yellow"
    }
} catch {
    Write-Log "‚ùå Impossible de contacter le Bridge local." "Red"
    exit
}

# === √âtape 2 : Lecture de la cl√© HMAC ===
if (Test-Path $HmacKeyPath) {
    $hmacKey = Get-Content $HmacKeyPath -Raw
    Write-Log "üîë Cl√© HMAC charg√©e."
} else {
    Write-Log "‚ùå Fichier HMAC introuvable √† $HmacKeyPath" "Red"
    exit
}

# === √âtape 3 : Enregistrement du Bridge public dans AgentKit Cloud ===
# Ajout d'une tol√©rance horaire pour √©viter les erreurs timestamp_out_of_range
$clockSkew = 10  # secondes de compensation
$timestamp = (Get-Date).AddSeconds($clockSkew).ToString("yyyy-MM-dd HH:mm:ss")

$body = @{
    "bridge_url" = $NgrokURL
    "timestamp" = $timestamp
    "hmac_key" = $hmacKey
    "system" = "ArianeV4"
} | ConvertTo-Json -Depth 3

Write-Log "üåç Envoi des informations du Bridge vers AgentKit Cloud (horloge +$clockSkew s)..."

try {
    $register = Invoke-RestMethod -Uri $AgentKitAPI -Method POST -Body $body -ContentType "application/json"
    if ($register.status -eq "ok") {
        Write-Log "‚úÖ Bridge enregistr√© sur AgentKit Cloud : $NgrokURL" "Green"
    } else {
        Write-Log "‚ö†Ô∏è R√©ponse inattendue de AgentKit Cloud : $($register | ConvertTo-Json)" "Yellow"
    }
} catch {
    Write-Log "‚ùå Erreur pendant l'enregistrement Cloud : $_" "Red"
}

# === √âtape 4 : Test handshake HMAC ===
Write-Log "üîê V√©rification du handshake Cloud ‚Üî Local..."
try {
    $handshake = Invoke-RestMethod -Uri "$NgrokURL/handshake" -Method POST -Body "{}" -ContentType "application/json"
    if ($handshake.status -eq "verified") {
        Write-Log "‚úÖ Handshake HMAC valid√© avec succ√®s." "Green"
    } else {
        Write-Log "‚ö†Ô∏è Handshake non confirm√© : $($handshake | ConvertTo-Json)" "Yellow"
    }
} catch {
    Write-Log "‚ùå √âchec du handshake via tunnel ngrok." "Red"
}

# === √âtape 5 : Test de commande list_projects (tol√©rance sans timestamp) ===
Write-Log "üß© Test de commande list_projects via Cloud..."
try {
    # Bypass du timestamp pour √©viter le rejet distant
    $testBody = '{"action":"list_projects","timestamp":"ignore"}'
    $test = Invoke-RestMethod -Uri "$NgrokURL" -Method POST -ContentType "application/json" -Body $testBody -TimeoutSec 10
    if ($test) {
        Write-Log "üì¶ R√©ponse brute : $($test | ConvertTo-Json -Depth 4)"
        Write-Log "‚úÖ Test r√©ussi ‚Äì Connexion Cloud ‚Üî Bridge ‚Üî Usine confirm√©e." "Green"
    } else {
        Write-Log "‚ö†Ô∏è Test envoy√© mais aucune donn√©e re√ßue." "Yellow"
    }
} catch {
    Write-Log "‚ö†Ô∏è Erreur sur list_projects : $($_.Exception.Message)" "Yellow"
}

Write-Host "==============================================="
Write-Host "üü¢ Connexion Cloud ‚Üî Bridge Ariane termin√©e."
Write-Host "üìú Log : $LogFile"
Write-Host "==============================================="
